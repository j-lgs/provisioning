---
- name: Create talos manifests
  hosts: localhost
  vars_files:
  - vars/main.default.yaml
  - vars/vault.default.yaml
  tasks:
  # The following three tasks deal generating a talos cluster configuration. Generated files are in the .gen directory.
  - name: Check if there is an existing cluster configuration
    stat:
      path: '.gen/{{ project }}/talosconfig'
    register: talosconfig

  - name: Generate talos cluster configuration
    shell: talosctl gen config "{{ cluster_name }}" "{{ endpoint }}" \
      --with-docs=false --with-examples=false -o ".gen/{{ project }}" \
      --install-disk="{{ disk }}" --install-image="{{ image }}" --with-cluster-discovery="{{ discovery }}" \
      --kubernetes-version "{{ kubernetes_version }}"
    when: not talosconfig.stat.exists

  - name: Set talosconfig endpoint and default node
    shell: talosctl --talosconfig=".gen/{{ project }}/talosconfig" config endpoint {{ endpoints }} && \
           talosctl --talosconfig=".gen/{{ project }}/talosconfig" config node "{{ default_node }}" && \
           talosctl config merge ".gen/{{ project }}/talosconfig"
    when: not talosconfig.stat.exists

    # The validation command does not support advanced shell features, so a script must be created.
  - name: Copy validation command
    copy:
      content: |
        #!/bin/bash
        tempfile=$(mktemp)
        python -c \
          'import yaml; import json; import sys; print(json.dumps(yaml.safe_load(sys.stdin)));' < "$1" > "${tempfile}"
        jsonpatch "${tempfile}" "$2"
        rm "${tempfile}"
      dest: ".gen/{{ project }}/validate_template"
      mode: 0755

  - name: Generate Haproxy configuration
    template:
      src: haproxy.cfg.j2
      dest: ".gen/{{ project }}/haproxy-{{ item.name }}.cfg"
      validate: "haproxy -f %s -c"
    when: item.api_proxy
    loop: "{{ controlplanes }}"

  - name: Generate keepalived configuration
    template:
      src: keepalived.conf.j2
      dest: ".gen/{{ project }}/keepalived-{{ item.name }}.conf"
      validate: "keepalived -t -f %s"
    when: item.api_proxy
    loop: "{{ controlplanes }}"

  - name: Generate keepalived check script
    template:
      src: check_apiserver.sh.j2
      dest: ".gen/{{ project }}/check_apiserver-{{ item.name }}.sh"
      validate: "shellcheck %s"
    when: item.api_proxy
    loop: "{{ controlplanes }}"

  - name: Check whether the controlplane's wireguard privatekeys have been generated
    stat:
      path: ".gen/{{ project }}/{{ item.name }}.privatekey"
    loop: "{{ controlplanes }}"
    register: privkey_stats

  # Controlplane private keys are saved to our ephemeral .gen/{{ project }} directory.
  - name: Generate controlplane privatekeys
    shell: umask 077 && wg genkey > ".gen/{{ project }}/{{ item.1.name }}.privatekey"
    when: not item.0.stat.exists and item.1.wg
    with_together:
    - "{{ privkey_stats.results }}"
    - "{{ controlplanes }}"

  # Since public keys are derived from private keys, we can always run this command.
  - name: Generate controlplane publickeys
    shell: wg pubkey < ".gen/{{ project }}/{{ item.name }}.privatekey"
    register: pubkeys
    loop: "{{ controlplanes }}"

  - name: Template talos controlplane
    template:
      src: "control.json.j2"
      dest: ".gen/{{ project }}/{{ item.0.name }}.json"
      validate: ".gen/{{ project }}/validate_template .gen/{{ project }}/controlplane.yaml %s"
    with_together:
    - "{{ controlplanes }}"
    - "{{ pubkeys.results }}"

  - name: Template talos workers
    template:
      src: "worker.json.j2"
      dest: ".gen/{{ project }}/{{ item.name }}.json"
      validate: ".gen/{{ project }}/validate_template .gen/{{ project }}/worker.yaml %s"
    loop: "{{ workers }}"

  - name: Remove patch validator script
    file:
      path: ".gen/{{ project }}/validate_template"
      state: absent
